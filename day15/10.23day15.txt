#day14回顾
自定义模块
    标识符．ｐｙ　不能是１２３．ｐｙ
    导入语句：
        import 语句
        from import 语句
        from import *　语句
    搜索模块的路径：
        １、搜索内建模块
        ２、当前运行时路径
        ３、搜索sys.path里提供的路径
    mymod.py---->mymod.pyc------>python3
模块的预置属性
    __doc__属性
    __file__
    __name__
        主模块　“__main__”
        非主模块　绑定　”模块名“
__all__列表
    作用是限定在from import *导入时，只导入__all__列表内的属性


模块的隐藏属性
    _下划线开头的属性　在from import * 导入时不会被导入

随机模块
    名字:random
        函数:
            random.random
            random.randint
            random.randrange(...)
            random.sample()
            random.choice
            ...

包 packge
    包的导入：
        import
        from import
        from import *

__init__.py
    作用:
        包的内容：
            函数，数据，文档字符串
__init__.py 里的__all__列表
    告诉 from import *语句导入的内容

包的相对导入
　　只能用于俩条语句：
    from　相对路径　import 语句
    from 相对　import *语句
　　相对路径：
        .
        ..
        ...


＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃day15新内容＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃

异常　exception （基础）
什么是错误
    错误是指由于逻辑或语法等导致程序无法正常执行的问题

特点
    无法预知

什么是异常
    异常是程序出错时标识的一种状态，当异常发生时，程序不会再向下执行，而去转去调用此函数的地方待处理此错
    误并恢复为正常状态
作用：
    用信号通知，通知上层调用者有错误产生需要处理

程序有俩种状态：
    正常状态／异常状态

try语句　的俩种语法
    try-except语句
    try-finally语句


try-except语句的语法
    try:
        可能触发异常的语句
    except 错误类型１ [as 变量１]:
        异常处理语句１
    except 错误类型２ [as 变量２]:
        异常处理语句２
    except (错误类型３，错误类型４)　[as 变量３]:
        异常处理语句３
    ．．．
    except:
        异常处理语句other　
    else:
        未发生异常的语句
    finally:
        最终语句

作用：
    尝试捕获错误，得到异常通知，将程序有异常状态转换为正常状态并继续执行

说明：
    as 子句是用于绑定错误对象的变量，可以省略
    except 子句可以有一个或多个，但是至少有一个
    else　子句最多只能有一个，也可以省略
    finally子句最多只能有有个，也可以省略
示例见：
    try_excpet.py


python3当中全部的错误类型：
    文档参见：
        python_base_docs_html/python全部的异常类型


try-finally语句
    语法：
        try:
            可能触发异常的语句
        finally:
            最终语句
    说明;
        finally子句不可以省略
        一定不存在excpet子句
    作用;
        通常用try-finally语句来做触发异常时必须要处理的事情
        无论异常是否发生，finally子句都会被执行
    注:
        try-finally语句不会改变程序的（正常／异常）状态
        注:



raise 语句
    作用：
        触发一个错误，让程序进入异常状态，发送错误通知给调用者
    语法：
        raise 异常类型
        或
        raise 异常对象
        或
        raise ＃重新触发上次异常
        示例：　
            raise 类型
            raise 异常对象　　e = valueerror("对象")　
                            raise e 
            raise err # raise 
        
        
        示例见：
            raise.py
练习：
    写一个函数，get_age()用来获取一个人的年龄信息，此函数的规定用户只能输入１－１４０之间的整数，
    如果用户输入其他数据则直接触发ValueError类型错误通知

assert语句　（断言语句）
    语法：
        assert 真值表达式，错误数据（通常是字符串）
    作用：
        当真值表达式为false时，用错误数据创建一个
        assertionError类型的错误，并进入异常状态
        通常用来故意制造一个错误
    等同于：
        if bool(真值表达式) == False:
            raise assertionError(错误数据)
    示例见：
        assert.PY


异常中的语句小结
    try-except 语句
        用于捕获（接收）错误通知，把异常状态转为正常状态
    try-finally语句
        用于执行在任意状态（正常／异常）都必须要执行的语句
    raise 语句
        触发错误（发送错误通知），让程序进入异常状态



迭代器　Iterator
什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指iter(obj)函数返回的对象（实例）
    迭代器可以用next(it) 函数获取可迭代对象的数据

迭代器函数iter和next
iter(iterable) 从可迭代对象中获取一个迭代器，iterable必须是能提供一个迭代器的可迭代对象

next(Iterator) 从迭代器iterator中获取下一个记录，如果无法获取下一条记录，则触发StopIteration异常

说明：
    迭代器只能往前取值，不会后退
    用iter函数可以返回一个可迭代对象
示例：　

L = [2,3,5,7]
it = iter(L)
print(next(it))     ２
print(next(it))     ３
print(next(it))     ５
print(next(it))     ７
print(next(it))  #异常


＃用迭代器访问　range() 函数返回的整数序列生成器
it = iter(range(1,10,3))
next(it)    1
next(it)    4
next(it)    7
next(it)    #stopiteration

示例见：
    iterator.py

练习：
    有一个集合
        s = {"唐生","悟空","八戒","沙僧"}
        用ｆｏｒ　语句来遍历所有元素如下：
            for x in s:
                print(x)
            else:
                print("遍历结束)
        #将for 改成while 和迭代器

