10.8号笔记
内容回顾：
-------------------------------------
Python3 <回车>
>>> 
>>> quit() /exit() / ctrl + d # 退出
注释：
 以# 开头 直至行尾
 常用的数据类型：
 int float complex bool
 空值对象
  None， 代表不存在
  运算符：
   算术运算符：
    + - * / // % **（幂运算）
    比较运算符：
    < <= > >= == ！= （不等于）
赋值语句：
  变量 =  表达式
  变量1 = 变量2 = 变量3 = 表达式
  变量1，变量2，变量3 = 序列
  作用：创建变量用来绑定表达式执行结果
  del 变量名
  #删除变量
   is，is not 运算符
判断俩个对象的id是否相同
复合赋值算术运算符
+= -= *= /= //= %= **=
y += x 等同于y = y + x

函数
 类型转换函数
 float（obj）
 int（x，base=10），int（x=0）
complex（r=0.0，i=0.0）
bool(x)
数值型函数：
abs（x） 取x的绝对值
round（number[,ndigit]） 取number的近似值
pow（x,y,z=None） # 求x的y次方或x的y次方对z求余

查看帮助的函数：
 >>>help（'字符串'）
 >>>help(函数名)

 基本输入输出函数：
 input（”提示字符串“） # 获取用户输入的字符串
 print（value1,value2,...., sep= ' ', end= '/n'）
  作用是把数字形式字符串后打印在屏幕终端上
----------------------------------------------------------------
  
10.8新内容 day03笔记
-----------------
if 语句
作用： 
   让程序根据条件选择性的执行某条语句或某些语句
   语法：
     if 真值表达式1：
        语句块1...
    elif 真值表达式2：
       语句块2...
    elif 真值表达式3：
       语句块3...
       ...
    else：
       语句块4
  说明:
    elif 子句可以有0个，1个，或多个
    else 子句可以有0个或1个，且只能放在if语句的最后




if 语句的嵌套
  if 语句本身是由多条子句组成的一条复合语句
  if 语句可以作为语句嵌套到另一个复合语句的内部
#####缩进一定搞明白####
mouth = int(input("请输入月份（1-12）: "))
if 1 <= mouth <= 12:
    print("输入正确")
    if mouth <=3:
        print("春季")
    elif mouth <= 6:
        print("夏季")
    elif mouth <= 9:
        print("秋季")
    else:
        print("冬季")
else:
    print("您的输入有误！！！")
# if 下面是一整个
 
条件表达式：
 语法：
  表达式1 if 真值表达式 else 表达式2
 作用：
   根据真值表达式的取值（true/False） 来决定执行表达式1或
   表达式2并返回结果
 s = -s if s < 0 else s
#先判断if 成立运行左面 不成立运行右面

pass 语句

 作用：
     通常用来填充语法空白
     pass 又名空语句
    语法：
    pass

布尔运算：
  运算符：
   not and or
   非   与  或
布尔非操作 not
 语法
   not x
   作用： 
    对x进行布尔取非，如bool（x） 为True，则返回False，否则为True
布尔与操作：
  x and y
  注：x，y 代表 表达式
  作用：
    优先返回假值对象，当x的布尔值为False时候，返回x否则返回y
    示例：
     True and True  # True
     True and False # False
     False and False #False
     False and True  # False
     #全真为真，一假便假
 优先返回假值对象
 eg： 100 and 0.0 #返回0.0
 从左到右开始判断，都假 返回第一个假

 布尔或操作：
   or 
   x or y
作用：
    优先返回真值对象，当x为True时返回x，否则返回y
 示例：
   True or True  # True
   True or False # True
   False or True # True
   False or False # False
              |______|
从左面开始判断 为真 为假 都继续判断右面 优先输出真值
 3.14 or 100 # 3.14
  0 or 0.0   # 0.0

正负号运算符
 +（正号） -（负号）
注： 一元运算符（一个元素参加运算）

语法：
 +　表达式
 －　表达式
 示例：
 　 ａ　＝　５
　　ｂ　＝　－ａ　＃－负号
　　ｃ　＝　＋ａ　＃　正号
　　print(a,b,c) # 5, -5, +5

字符串　str
 作用：　
 　　用来记录文字（文本）信息
 　　表示方法：
 　　在非注释中凡是用引号括起来的部分都是字符串
 　'  单引号
 　" 　双引号
 　''' 三单引号
 　""" 三双引号
 空字符串的字面值的表达式
 　'' "" ''''''  """"""
 非空字符串的字面值的表达方式
 'hello' "hello" '''hello''' """hello"""
 单引号和双引号的区别
 　单引号内的双引号不算结束符
 　双引号内的单引号不算结束符
 
 三引号字符串的作用：
 　三引号字符串可以包含单引号和双引号
 　三引号字符串中的换行会自动转换为换行符"\n"
s3 = '''welcome to beijing.
I like python!
I love you'''
print(s3)

隐式字符串字面值拼接
　示例：
　　s = "I'm a teacher"  'my name is "chenhuaqi"'

用转义序列代表特殊字符
　字符串字面值中用字符反斜杠\ 后跟一些字符代表特殊的做一个字符，如：
转字格式　含义
\'  代表一个单引号
\"  代表一个双引号
\\  代表一个反斜杠
\n  换行
\r  返回光标至行首
ｅｇ：>>> print("ABCD\rab")
　　　　　　abCD
\f  换页
\t 水平制表符
　　print("aaaa\tb")
　　　　aaaa	b
\v 垂直制表符
\b 倒退
>>> print("ABCD\bd")
ABCd
\0 空字符（字符值为０）
\0oo oo为俩位八进制表示的字符
\xXX XX为俩位十六进制表示的字符
\uXXXX 四位十六进制表示的Unicode 16字符
\UXXXXXXXX 八位十六进制表示的Unicode 32字符
ASCII编码表
$ man ascii <回车>
常用的ＡＳＣＩＩ编码
字符　　　　　十进制　　　　　　　十六进制
'0'          48               0x30
'A'          65               0x41
'a'          97               0x61

序列的概念
　字符串是序列（有序排列）
所有的序列都能用len(x) 函数求其长度
len(x) 函数
　返回字符串中字符的个数

raw 字符串（原始字符串）
格式：
　　　r'字符串内容'
　　　r"字符串内容"
　　　r'''字符串内容'''
     r"""字符串内容"""
    作用：　
    　　让转义符号反斜杠　\ 无效
示例：
　a = 'C:\newfile\test.py'
  print(a)
  print(len(a))
  a = r'C:\newfile\test.py'
  print(a)
  print(len(a))
  
  字符串的运算：
  　运算符：
  　＋　＋＝　＊　＊＝
  ＋加号运算符用于拼接字符串
  ｘ　＝　"ABCD"
   y = "123"
   z = x + y
   print(z) #ABCD123
   y + x # 123ABCD
+= 用于原字符串和右侧字符串拼接，再用变量绑定新的字符串
　x = 'ABC'
  y = '123'
  x += y # x = x + y
    print(x)
* 运算符生成重复的字符串
　x = "ABC" * 3
 print(x) # ABCABCABC
 注：　字符串只能和整数相乘
 
 *= 生成重复的字符串，再用原变量绑定
 ｘ＝　'123'
 x *= 2
 print(x) # 123123

 字符串的比较运算
 　　运算符：
 　< <= > >= == !=
 比较规则：
 　　依次按编码值进行俩俩字符比较，一旦不同，则比较结束
 并返回比较结果，当编码值和长度完全相同时，俩个字符串相同
 示例：
        'A' < 'B'  #True
        'ABC' > 'ABB' #True
        'ADC' < 'ABC' #False
        'ABC' >= '123' #True
        'AB' < 'ABC' #True
        'abc' == 'ABC' #False

in, not in 运算符
作用：　
　in 用于序列，字典，集合中，用于判断某个值是否存在于容器中，如果存在则返回
True，否则返回False
 not in 与　ｉｎ　运算符的返回结果相反
 格式：
 　　对象　in　序列、
 　示例：
 　　x = 'welcome to tarena!'
   'to' in x   #True
   'hello' in x # False
  'e t' in x #True
  'abc' not in x # True
  

练习：
　　１．北京出租车计价器：
　　　收费标准：
　　　　　　３公里以内收费　１３元
　　　　　　基本单价　２．３元／公里（超出３公里以外）
　　　　　　空驶费：超过１５公里后，每公里加收单价的５０％的空驶费（３．４５／公里）
　　　　　　要求：
　　　　　　　　输入公里数，打印出费用金额
　２、输入一个学生的三科成绩
　　　　１、打印出最高分是多少分？
　　　　２、打印出最低分是多少分？
　　　　３、打印出平均分是多少分？
３、计算　ＢＭＩ指数（Body Mass Index） 又称身体质量指数
　计算公式：
　　ＢＭＩ　＝　体重（公斤）／身高的平方（米）
如：一个６９公斤的人，身高１７３公分，则　６９／１．７３＊＊２　＃　得２３．０５
　标准表：
　　　ＢＭＩ<18.5 体重过轻
　　　　１８．５< BMI <24 体重正常
　　　ＢＭＩ　>= 24 体重过重
　　要求：输入身高和体重，并打印出ＢＭＩ的值，并打印体重状况




# ２、输入一个学生的三科成绩
# 　　　　１、打印出最高分是多少分？
# 　　　　２、打印出最低分是多少分？
# 　　　　３、打印出平均分是多少分？

# s = int(input("数学成绩为: "))
# l = int(input("语文成绩为: "))
# q = int(input("英语成绩为: "))
# max = s 
# if s < l:
#     max = l
# if l < q:
#     max = q
# print("最大值是",max)
# min = s
# if s > l:
#     min = l
# if l > q:
#     min = q
# print("最小值是：",min)
# p = (s+l+q)/3
# print("平均成绩为:%.2f" % (p))









































