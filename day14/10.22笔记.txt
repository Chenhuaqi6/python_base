day13　回顾

装饰器
    装饰器函数：
        def 装饰器名（fn）:
            ...
            return　函数

day14 笔记
自定义模块并导入
    要求：
        模块文件名后缀名必须以.py结尾
        模块文件名必须是合法的标识符
        避免名称和内建模块名冲突
    导入方式:
        import 语句
        from import 语句
        from import *　语句
    示例见: 
        mymod.py

import 语句查找模块文件的路径顺序
    import 模块名　＃去哪找这个"模块名.py"
    1、搜索内建模块
    ２、搜索程序运行时的路径（当前路径）
    ３、sys.path 提供的路径
       sys.path 是一个列表，内部存入的都是模块的搜索路径
       >>> import sys
       >>> print(sys.path)

安装　第三方模块或包
　　pip3 install　模块名
让import语句能找到自己的模块
    １、把自己的写的模块放到sys.path中的某个文件夹内
    ２、修改sys.path列表，在内部添加一个文件夹的字符串
    （注：此做法支队当前程序起作用）
    如：    
        import sys
        sys.path.append("/home/tarena")

模块化编程的优点
    1、有利于多人合作开发
    ２、使代码更加易于维护
    ３、提高代码的复用率
    ４、有利于解决变量名冲突问题（模块内的全局变量的作用域为模块内的全局）

模块的加载过程
    在模块导入时，模块内的所有语句都会执行
    如果一个模块已经导入，则再次导入时不会重新执行模块内的语句

模块被导入和执行的过程：
    １、先搜索相关路径找到 模块名.py
    2、判断是否有此模块对应的pyc文件，如果．pyc问价比.py文件新则直接加载.pyc文件
    ３、如果.pyc文件比.py文件旧，则用模块名.py　生成.pyc文件，并加载执行
模块的编译
                编译                    解释执行
    mymod.py-----------> mymod.pyc -------------->python

模块的属性：
    __doc__属性
        用于绑定模块内的文档字符串
    模块的文档字符串用于help（模块）　函数提供帮助信息
    示例见：
        mymod2.py

    __file__属性
    　用于绑定模块的文件路径名

    __name__属性
     __name__属性__用来记录模块自身的名字
     作用：
        １、记录模块名
        ２、用来判断是否为主模块
    说明：
        当模块作为主模块（也就是第一个运行的模块）运行时，
        __name__属性 绑定　"__main__"
        当此模块不是主模块时，__name__属性　绑定模块名
        　如： 
            mymod.py 的模块名为"mymod"
    模块的__all__列表
        作用：
            当用 from xx import *语句导入时，只用__all__列表内的属性
        说明：
            __all__列表是一个用来存放可导出属性的字符串列表
    模块的隐藏属性：
        模块中以"_"开头的属性，在用　form xxx import *　导入时将不被导入，通常称这些属性为隐藏属性
        示例见：
            mymod4.py
随机模块　random    
        作用：
            用于模拟或生成随机输出的模块：
            文档参见：
                python_base_docs_html/随机模块random.py
作用：
用于模拟或生成随机输出的模块.

用法示意:
import random as R

    函数名 	                  描述
R.random() 	返回一个[0, 1) 之间的随机实数
R.uniform(a,b) 	返回[a,b] 区间内的随机实数
R.randint(a, b) 	返回在[a, b]范围内的整数(包含a,b)
R.randrange([start,] stop[, step]) 	返回range(start,stop,step)中的随机数
R.choice(seq) 	从序列中返回随意元素
R.shuffle(seq[, random]) 	随机指定序列的顺序(乱序序列）
R.sample(seq,n) 	从序列中选择n个随机且不重复的元素

练习：
　　用random模块，随机为自己生成一个６位数的数字密码


包（模块包）　package
    包是将模块以文件夹的组织形式进行分组管理的方法

    作用：
        将一系列模块进行分类管理，有利于防止命名冲突
        可以在需要时加载一个或部分模块，则不是全部模块
        
包的导入
　同模块的导入规则
　import 包名　[as 包别名]
　import 包名．模块名　[as 模块新名]
　import 包名.子包名．模块名 [as 模块新名]
　
　from 包名　import 模块名 [as 模块新名]
　from 包名.子包名　import　模块名　[as 模块新名]
　from 包名．子包名．模块名　import 属性名　[as 属性新名]   
　
　form 包名 import *
 form 包名．模块名　import *


 __init__.py 文件
    __init__.py 是常规包内必须存在的文件
    __init__.py 会在包加载时被自动调用

    作用：
        编写此包的内容
        在包内填写包的文档字符串
        在__init__.py 文件内可以加载此包所依赖的一些其他模块


__init__.py 内的　__all__列表
作用：
    用来记录此包中有哪儿些包或模块需要导入
    当用from　包　import　＊语句导入模块时，只查找__all__中所有的模块或子包
说明：
    __all__列表 只在from xxx import * 起作用

import 语句搜索包的路径的顺序
    １、搜索程序运行时的路径（当前工作目录）
    ２、sys.path 提供的路径

包的相对导入
    包的相对导入是指包内模块的相互导入
    语法：
        from 相对路径包或模块　import 属性或模块名
        或
        from 相对路径包或模块　import *
    相对路径：
        在from import语句和from import *语句中可以用相对路径
        .　代表当前目录
        ..　代表上一级目录
        ...代表上二级目录
        ....以此类推
        注：
            相对导入时不能超出包的外部
    